const nepaliYears = [
  [2000, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 13],
  [2001, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 14],
  [2002, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 15],
  [2003, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 16],
  [2004, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 17],
  [2005, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 18],
  [2006, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 19],
  [2007, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 20],
  [2008, [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], 22],
  [2009, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 23],
  [2010, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 24],
  [2011, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 25],
  [2012, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 26],
  [2013, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 28],
  [2014, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 29],
  [2015, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 30],
  [2016, [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], 31],
  [2017, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 32],
  [2018, [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], 33],
  [2019, [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 34],
  [2020, [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], 36],
  [2021, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 37],
  [2022, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], 38],
  [2023, [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 39],
  [2024, [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], 40],
  [2025, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 41],
  [2026, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 42],
  [2027, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 44],
  [2028, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 45],
  [2029, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 46],
  [2030, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 47],
  [2031, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 48],
  [2032, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 49],
  [2033, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 50],
  [2034, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 51],
  [2035, [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], 53],
  [2036, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 54],
  [2037, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 55],
  [2038, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 56],
  [2039, [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], 57],
  [2040, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 58],
  [2041, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 59],
  [2042, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 60],
  [2043, [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], 61],
  [2044, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 62],
  [2045, [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], 63],
  [2046, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 64],
  [2047, [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], 65],
  [2048, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 67],
  [2049, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], 68],
  [2050, [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 69],
  [2051, [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], 70],
  [2052, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 71],
  [2053, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], 72],
  [2054, [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 73],
  [2055, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 74],
  [2056, [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30], 75],
  [2057, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 76],
  [2058, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 77],
  [2059, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 78],
  [2060, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 79],
  [2061, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 80],
  [2062, [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31], 81],
  [2063, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 82],
  [2064, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 83],
  [2065, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 84],
  [2066, [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], 85],
  [2067, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 86],
  [2068, [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], 87],
  [2069, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 88],
  [2070, [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], 89],
  [2071, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 90],
  [2072, [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], 91],
  [2073, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], 92],
  [2074, [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], 93],
  [2075, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 94],
  [2076, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], 95],
  [2077, [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], 96],
  [2078, [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], 97],
  [2079, [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], 98],
  [2080, [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], 99],
  [2081, [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30], 100],
  [2082, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], 101],
  [2083, [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30], 102],
  [2084, [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30], 103],
  [2085, [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30], 104],
  [2086, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], 105],
  [2087, [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30], 106],
  [2088, [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30], 107],
  [2089, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], 108],
  [2090, [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], 109],
];

const nepaliMonths = [
  { en: "Baishakh", ne: "बैशाख" },
  { en: "Jestha", ne: "जेठ" },
  { en: "Ashadh", ne: "असार" },
  { en: "Shrawan", ne: "श्रावण" },
  { en: "Bhadra", ne: "भाद्र" },
  { en: "Ashwin", ne: "आश्विन" },
  { en: "Kartik", ne: "कार्तिक" },
  { en: "Mangsir", ne: "मंसिर" },
  { en: "Poush", ne: "पौष" },
  { en: "Magh", ne: "माघ" },
  { en: "Falgun", ne: "फाल्गुन" },
  { en: "Chaitra", ne: "चैत्र" },
];

const nepaliDigits = ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"];

/**
 * Converts an English date to Nepali date
 *
 * @param {Date|number|string} engDate - English date (Date object, timestamp, or date string)
 * @param {boolean} returnNepaliDigits - Whether to return Nepali digits (true) or English digits (false)
 * @param {boolean} returnNepaliNames - Whether to return Nepali month names (true) or English month names (false)
 * @returns {Object} - Object containing Nepali date information
 */
function convertEnglishToNepali(
  engDate,
  returnNepaliDigits = false,
  returnNepaliNames = false
) {
  const date = new Date(engDate);

  if (isNaN(date.getTime())) {
    throw new Error("Invalid date provided");
  }

  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();

  if (year < 1943 || year > 2033) {
    throw new Error("Date out of supported range (1943-2033 AD)");
  }

  const referenceEnglishDate = new Date(1943, 3, 14);

  const timeDiff = date.getTime() - referenceEnglishDate.getTime();
  const diffDays = Math.floor(timeDiff / (1000 * 3600 * 24));

  let nepaliYear = 2000;
  let totalDays = diffDays;
  let yearData = null;

  for (let i = 0; i < nepaliYears.length; i++) {
    const yearInfo = nepaliYears[i];
    const yearDays = yearInfo[1].reduce(
      (total, monthDays) => total + monthDays,
      0
    );

    if (totalDays < yearDays) {
      yearData = yearInfo;
      break;
    }

    totalDays -= yearDays;
    nepaliYear++;
  }

  if (!yearData) {
    throw new Error("Date out of supported range");
  }

  let nepaliMonth = 0;
  let nepaliDay = 0;

  for (let i = 0; i < 12; i++) {
    if (totalDays < yearData[1][i]) {
      nepaliMonth = i;
      nepaliDay = totalDays + 1;
      break;
    }
    totalDays -= yearData[1][i];
  }

  const formatDigit = (num) => {
    const strNum = num.toString();
    if (returnNepaliDigits) {
      return strNum
        .split("")
        .map((digit) => nepaliDigits[parseInt(digit, 10)])
        .join("");
    }
    return strNum;
  };

  const monthName = returnNepaliNames
    ? nepaliMonths[nepaliMonth].ne
    : nepaliMonths[nepaliMonth].en;

  return {
    year: formatDigit(nepaliYear),
    month: formatDigit(nepaliMonth + 1),
    monthName: monthName,
    day: formatDigit(nepaliDay),
    formattedDate: `${formatDigit(nepaliYear)} ${monthName} ${formatDigit(
      nepaliDay
    )}`,
    weekDay: date.getDay(),
    englishDate: `${year}-${month.toString().padStart(2, "0")}-${day
      .toString()
      .padStart(2, "0")}`,
  };
}

/**
 * Simple function to convert a date string to Nepali date
 *
 * @param {string} dateStr - Date string in format 'YYYY-MM-DD'
 * @param {boolean} useNepaliDigits - Use Nepali digits in output
 * @param {boolean} useNepaliNames - Use Nepali month names in output
 * @returns {string} - Formatted Nepali date
 */
function convertToNepaliDate(
  dateStr,
  useNepaliDigits = false,
  useNepaliNames = false
) {
  try {
    const result = convertEnglishToNepali(
      dateStr,
      useNepaliDigits,
      useNepaliNames
    );
    return result.formattedDate;
  } catch (error) {
    return `Error: ${error.message}`;
  }
}

window.convertToNepaliDate = convertToNepaliDate;
